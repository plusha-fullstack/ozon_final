// Code generated by MockGen. DO NOT EDIT.
// Source: ./filestorage.go
//
// Generated by this command:
//
//	mockgen -source ./filestorage.go -destination=./mocks/filestorage.go -package=mock_storage
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	db "gitlab.ozon.dev/pupkingeorgij/homework/internal/db"
	repository "gitlab.ozon.dev/pupkingeorgij/homework/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
	isgomock struct{}
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, order *repository.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, order)
}

// CreateTx mocks base method.
func (m *MockOrderRepository) CreateTx(ctx context.Context, tx db.Tx, order *repository.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockOrderRepositoryMockRecorder) CreateTx(ctx, tx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockOrderRepository)(nil).CreateTx), ctx, tx, order)
}

// Delete mocks base method.
func (m *MockOrderRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderRepository)(nil).Delete), ctx, id)
}

// DeleteTx mocks base method.
func (m *MockOrderRepository) DeleteTx(ctx context.Context, tx db.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockOrderRepositoryMockRecorder) DeleteTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockOrderRepository)(nil).DeleteTx), ctx, tx, id)
}

// GetByID mocks base method.
func (m *MockOrderRepository) GetByID(ctx context.Context, id string) (*repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepository)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockOrderRepository) GetByUserID(ctx context.Context, userID string, limit int, activeOnly bool) ([]*repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID, limit, activeOnly)
	ret0, _ := ret[0].([]*repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockOrderRepositoryMockRecorder) GetByUserID(ctx, userID, limit, activeOnly any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockOrderRepository)(nil).GetByUserID), ctx, userID, limit, activeOnly)
}

// Update mocks base method.
func (m *MockOrderRepository) Update(ctx context.Context, order *repository.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderRepositoryMockRecorder) Update(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderRepository)(nil).Update), ctx, order)
}

// UpdateTx mocks base method.
func (m *MockOrderRepository) UpdateTx(ctx context.Context, tx db.Tx, order *repository.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockOrderRepositoryMockRecorder) UpdateTx(ctx, tx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockOrderRepository)(nil).UpdateTx), ctx, tx, order)
}

// MockReturnRepository is a mock of ReturnRepository interface.
type MockReturnRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReturnRepositoryMockRecorder
	isgomock struct{}
}

// MockReturnRepositoryMockRecorder is the mock recorder for MockReturnRepository.
type MockReturnRepositoryMockRecorder struct {
	mock *MockReturnRepository
}

// NewMockReturnRepository creates a new mock instance.
func NewMockReturnRepository(ctrl *gomock.Controller) *MockReturnRepository {
	mock := &MockReturnRepository{ctrl: ctrl}
	mock.recorder = &MockReturnRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReturnRepository) EXPECT() *MockReturnRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReturnRepository) Create(ctx context.Context, ret *repository.ReturnEntry) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "Create", ctx, ret)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReturnRepositoryMockRecorder) Create(ctx, ret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReturnRepository)(nil).Create), ctx, ret)
}

// CreateTx mocks base method.
func (m *MockReturnRepository) CreateTx(ctx context.Context, tx db.Tx, ret *repository.ReturnEntry) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "CreateTx", ctx, tx, ret)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockReturnRepositoryMockRecorder) CreateTx(ctx, tx, ret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockReturnRepository)(nil).CreateTx), ctx, tx, ret)
}

// GetPaginated mocks base method.
func (m *MockReturnRepository) GetPaginated(ctx context.Context, page, limit int) ([]*repository.ReturnEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", ctx, page, limit)
	ret0, _ := ret[0].([]*repository.ReturnEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockReturnRepositoryMockRecorder) GetPaginated(ctx, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockReturnRepository)(nil).GetPaginated), ctx, page, limit)
}

// MockHistoryRepository is a mock of HistoryRepository interface.
type MockHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockHistoryRepositoryMockRecorder is the mock recorder for MockHistoryRepository.
type MockHistoryRepositoryMockRecorder struct {
	mock *MockHistoryRepository
}

// NewMockHistoryRepository creates a new mock instance.
func NewMockHistoryRepository(ctrl *gomock.Controller) *MockHistoryRepository {
	mock := &MockHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepository) EXPECT() *MockHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHistoryRepository) Create(ctx context.Context, entry *repository.HistoryEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHistoryRepositoryMockRecorder) Create(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHistoryRepository)(nil).Create), ctx, entry)
}

// CreateTx mocks base method.
func (m *MockHistoryRepository) CreateTx(ctx context.Context, tx db.Tx, entry *repository.HistoryEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", ctx, tx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockHistoryRepositoryMockRecorder) CreateTx(ctx, tx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockHistoryRepository)(nil).CreateTx), ctx, tx, entry)
}

// GetByOrderID mocks base method.
func (m *MockHistoryRepository) GetByOrderID(ctx context.Context, orderID string) ([]*repository.HistoryEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]*repository.HistoryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderID indicates an expected call of GetByOrderID.
func (mr *MockHistoryRepositoryMockRecorder) GetByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderID", reflect.TypeOf((*MockHistoryRepository)(nil).GetByOrderID), ctx, orderID)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, username, password)
}

// CreateUserTx mocks base method.
func (m *MockUserRepository) CreateUserTx(ctx context.Context, tx db.Tx, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", ctx, tx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockUserRepositoryMockRecorder) CreateUserTx(ctx, tx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockUserRepository)(nil).CreateUserTx), ctx, tx, username, password)
}

// ValidateUser mocks base method.
func (m *MockUserRepository) ValidateUser(ctx context.Context, username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockUserRepositoryMockRecorder) ValidateUser(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockUserRepository)(nil).ValidateUser), ctx, username, password)
}
